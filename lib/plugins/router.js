// Generated by CoffeeScript 2.4.1
// ## Plugin "router"

// Dependencies
var Parameters, clone, error, is_object, merge, path, stream;

path = require('path');

stream = require('stream');

error = require('../utils/error');

({clone, merge, is_object} = require('mixme'));

// Parameters & plugins
Parameters = require('../Parameters');

require('../plugins/config');

Parameters.prototype.init = (function(parent) {
  return function() {
    this.register({
      configure_set: function({config, command}, handler) {
        var base, base1, base2, ref, ref1;
        if (command.length) {
          return handler;
        }
        if (config.router == null) {
          config.router = {};
        }
        if ((base = config.router).writer == null) {
          base.writer = 'stderr';
        }
        if ((base1 = config.router).end == null) {
          base1.end = false;
        }
        if ((base2 = config.router).route == null) {
          base2.route = path.resolve(__dirname, '../routes/help');
        }
        if (typeof config.router.writer === 'string') {
          if ((ref = config.router.writer) !== 'stdout' && ref !== 'stderr') {
            throw error(['Invalid Help Configuration:', 'accepted values are ["stdout", "stderr"] when writer is a string,', `got ${JSON.stringify(config.router.writer)}`]);
          }
        } else if (!(config.router.writer instanceof stream.Writable)) {
          if ((ref1 = config.router.writer) !== 'stdout' && ref1 !== 'stderr') {
            throw error(["Invalid Help Configuration:", "writer must be a string or an instance of stream.Writer,", `got ${JSON.stringify(config.router.writer)}`]);
          }
        }
        return handler;
      }
    });
    return parent.call(this, ...arguments);
  };
})(Parameters.prototype.init);

Parameters.prototype.init = (function(parent) {
  return function() {
    this.register({
      configure_set: function({config, command}, handler) {
        var ref;
        if (!config.route) {
          return handler;
        }
        if ((ref = typeof config.route) !== 'function' && ref !== 'string') {
          throw error(['Invalid Route Configuration:', "accept string or function", !command.length ? "in application," : void 0, command.length ? `in command ${JSON.stringify(command.join(' '))},` : void 0, `got ${JSON.stringify(config.route)}`]);
        }
        return handler;
      }
    });
    return parent.call(this, ...arguments);
  };
})(Parameters.prototype.init);


// ## Method `route([cli_arguments], ...users_arguments)`

// * `cli_arguments`: `[string] | object | process` The arguments to parse into parameters, accept the [Node.js process](https://nodejs.org/api/process.html) instance, an [argument list](https://nodejs.org/api/process.html#process_process_argv) provided as an array of strings or the context object; optional, default to `process`.
// * `...users_arguments`: `any` Any arguments that will be passed to the executed function associated with a route.
// * Returns: `any` Whatever the route function returns.

// How to use the `route` method to execute code associated with a particular command.
Parameters.prototype.route = function(context = process, ...args) {
  var appconfig, command, config, err, i, params, route, route_call, route_error, route_from_config, route_load;
  // Normalize arguments
  // Remove node and script argv elements
  if (context === process) {
    context = {
      argv: context.argv.slice(2)
    };
  } else if (Array.isArray(context)) {
    context = {
      argv: context
    };
  } else if (!is_object(context)) {
    context.argv = context;
    throw error(['Invalid Router Arguments:', 'first argument must be a context object, the argv array or the process object,', `got ${JSON.stringify(context)}`]);
  }
  appconfig = this.confx().get();
  route_load = (route) => {
    if (typeof route === 'string') {
      return this.load(route);
    } else if (typeof route === 'function') {
      return route;
    } else {
      throw Error(`Invalid Route: expect a string or a function, got ${route}`);
    }
  };
  route_call = (route, command, params, err, args) => {
    var config, writer;
    config = this.confx().get();
    if (config.router.writer === 'stdout') {
      writer = process.stdout;
    } else if (config.router.writer === 'stderr') {
      writer = process.stderr;
    } else if (config.router.writer instanceof stream.Writable) {
      writer = config.router.writer;
    }
    context = {
      command: command,
      error: err,
      params: params,
      args: args,
      writer: writer,
      ...context
    };
    return this.hook('router_call', context, (context) => {
      return route.call(this, context, ...args);
    });
  };
  route_error = (err, command) => {
    var params, route;
    context.argv = command.length ? ['help', ...command] : ['--help'];
    params = this.parse(context.argv);
    route = route_load(this.config.router.route);
    return route_call(route, command, params, err, args);
  };
  route_from_config = (config, command, params) => {
    var err, route;
    route = config.route;
    if (!route) {
      // Provide an error message if leaf command without a route
      if (!Object.keys(config.commands).length) { // Object.keys(config.commands).length or
        err = config.root ? error(['Missing Application Route:', 'a \"route\" definition is required when no child command is defined']) : error(['Missing Command Route:', `a "route" definition ${JSON.stringify(params[appconfig.command])} is required when no child command is defined`]);
      }
      // Convert argument to an help command
      context.argv = command.length ? ['help', ...command] : ['--help'];
      params = this.parse(context.argv);
      route = route_load(this.config.router.route);
    } else {
      route = route_load(route);
    }
    return route_call(route, command, params, err, args);
  };
  try {
    // Read parameters
    params = this.parse(context.argv);
  } catch (error1) {
    err = error1;
    return route_error(err, err.command || []);
  }
  // Print help
  if (command = this.helping(params)) {
    route = this.load(appconfig.router.route);
    return route_call(route, command, params, err, args);
  } else {
    // Return undefined if not parsing command based arguments
    // Load a command route
    command = params[appconfig.command];
    if (appconfig.extended) {
      // TODO: not tested yet, construct a commands array like in flatten mode when extended is activated
      command = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = params.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
          results.push(params[i][appconfig.command]);
        }
        return results;
      })();
    }
    config = this.confx(command).get();
    return route_from_config(config, command || [], params);
  }
};
