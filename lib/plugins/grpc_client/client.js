// Generated by CoffeeScript 2.4.1
// Dependencies
var grpc, path, protoLoader;

path = require('path');

// grpc = require '@grpc/grpc-js'
grpc = require('grpc');

protoLoader = require('@grpc/proto-loader');

module.exports = function(config = {}) {
  var client, endpoint, k, packageDefinition, proto_path, ref, service, shell_proto;
  if (config.address == null) {
    config.address = '127.0.0.1';
  }
  if (config.port == null) {
    config.port = 50051;
  }
  
  // Load the definition
  proto_path = path.resolve(__dirname, '../grpc_server/shell.proto');
  packageDefinition = protoLoader.loadSync(proto_path, {
    keepCase: true,
    longs: String,
    enums: String,
    defaults: true,
    oneofs: true
  });
  shell_proto = grpc.loadPackageDefinition(packageDefinition).shell;
  // Instantiate the client
  endpoint = `${config.address}:${config.port}`;
  client = new shell_proto.Shell(endpoint, grpc.credentials.createInsecure());
  ref = shell_proto.Shell.service;
  for (k in ref) {
    service = ref[k];
    // Response stream return a readable stream
    // Otherwise, convert the callback approach to a promise
    if (service.responseStream !== true) {
      client[k] = (function(handler) {
        return function() {
          var args, self;
          self = this;
          args = arguments;
          return new Promise(function(resolve, reject) {
            return handler.call(self, ...args, function(err, response) {
              if (err) {
                return reject(err);
              } else {
                return resolve(response);
              }
            });
          });
        };
      })(client[k]);
    }
  }
  return client;
};
