{
    "componentChunkName": "component---src-templates-page-js",
    "path": "/usage/tutorial/",
    "result": {"data":{"markdownRemark":{"html":"<p>Welcome to Shell.js! The goal of this tutorial is to guide you through configuring and building your first CLI application using Shell.js. Starting from scratch and go on to advanced usage of its APIs. The tutorial contains the following sections:</p>\n<ul>\n<li>What is the library about?</li>\n<li>Getting started</li>\n<li>Parsing arguments</li>\n<li>Argument topology</li>\n<li>Configuring options</li>\n<li>Configuring commands</li>\n<li>Parsing and handling arguments (commands, options, main)</li>\n<li>Getting help</li>\n<li>Structuring the code with routing</li>\n</ul>\n<h2 id=\"what-is-the-library-about\" style=\"position:relative;\"><a href=\"#what-is-the-library-about\" aria-label=\"what is the library about permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" fill=\"#fff\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is the library about?</h2>\n<p>Shell.js is a Node.js package published on NPM. It is a sugar to build CLI application for parsing typical Unix command line arguments.</p>\n<p>It offers powerful features such as:</p>\n<ul>\n<li>Reversibility: read and write arguments is bi-directional</li>\n<li>Auto-discovery: extract unregistered options</li>\n<li>Unlimited multi-level commands (eg <code class=\"language-text\">myapp server start ...</code>)</li>\n<li>Type conversion (<code class=\"language-text\">string</code>, <code class=\"language-text\">boolean</code>, <code class=\"language-text\">integer</code>, <code class=\"language-text\">array</code>)</li>\n<li>Object literals: config and parsed results are serializable and human readable</li>\n<li>Routing: run dedicated functions or modules based on user commands</li>\n<li>Auto generated help</li>\n</ul>\n<h2 id=\"getting-started\" style=\"position:relative;\"><a href=\"#getting-started\" aria-label=\"getting started permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" fill=\"#fff\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting started</h2>\n<p>For users not familiar with the Node.js environment, you can follow the <a href=\"https://nodejs.org/en/download/\">official installation instructions</a> to get started and have the <code class=\"language-text\">node</code>, <code class=\"language-text\">npm</code> and <code class=\"language-text\">npx</code> commands available on your system.</p>\n<p>The <code class=\"language-text\">node</code> command execute JavaScript scripts. The <code class=\"language-text\">npm</code> command expose the NPM package manager for JavaScript. The <code class=\"language-text\">npx</code> is intended to help round out the experience of using packages from the npm registry.</p>\n<p>Once you have installed Node, create a basic Node.js project which is called a package:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Create a new project directory</span>\n<span class=\"token function\">mkdir</span> myapp <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> myapp\n<span class=\"token comment\"># Initialise the package with skipping the questionnaire</span>\n<span class=\"token function\">npm</span> init --yes\n<span class=\"token function\">cat</span> package.json\n<span class=\"token comment\"># Add the dependency</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">add</span> shell\n<span class=\"token function\">cat</span> package.js <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> shell\n<span class=\"token comment\"># Create a new script</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'console.log(\"hello\")'</span> <span class=\"token operator\">></span> app.js\nnode app</code></pre></div>\n<p>The Shell.js dependency is now downloaded and available inside the \"./node_modules\" folder. We can start coding our application by editing the \"app.js\" file.</p>\n<h2 id=\"parsing-arguments\" style=\"position:relative;\"><a href=\"#parsing-arguments\" aria-label=\"parsing arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" fill=\"#fff\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parsing arguments</h2>\n<p>Let's consider a simple application by modifying the \"app.js\" file as follow:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Import the package</span>\n<span class=\"token keyword\">const</span> shell <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shell'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Create a new instance</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  main<span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Parse CLI arguments</span>\n<span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The \"shell\" package export a function which expect to a configuration object describing your commands.</p>\n<p>Consider the configuration as the schema or the model of your application arguments. The <code class=\"language-text\">main</code> property retrieve all the arguments of an application which are not mapped otherwise in the form of an array. We will cover other types for arguments later such as options and commands.</p>\n<p>The <code class=\"language-text\">parse</code> method convert the arguments into a parameter object. You can provide your own arguments or let <code class=\"language-text\">parse</code> discover them automatically if no argument is provided like above. Node.js expose the CLI arguments with <code class=\"language-text\">process.argv</code> as an array. The first 2 arguments are the path to the node binary and the script being executed. Shell.js will strip those arguments and only parse what is left.</p>\n<p>You can now execute <code class=\"language-text\">node app world</code> and it shall print:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> hello<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'world'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"argument-topology\" style=\"position:relative;\"><a href=\"#argument-topology\" aria-label=\"argument topology permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" fill=\"#fff\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Argument topology</h2>\n<p>We have explain how to use the <code class=\"language-text\">main</code> property to retrieve all the arguments but there are other types of properties. Considering a rather complex command such as:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node app --config <span class=\"token string\">\"./my/repo\"</span> start --force <span class=\"token number\">0.0</span>.0.0:80</code></pre></div>\n<p>This CLI command is made of multiple sections.</p>\n<ul>\n<li><code class=\"language-text\">application</code>: the overall configuration define the application.</li>\n<li><code class=\"language-text\">command</code>: \"start\" is called a command in param and is a subset of an application. It has its own options and main properties, dissociated from the ones defined at the application level.</li>\n<li><code class=\"language-text\">options</code>: both \"config\" and \"start\" are options. The \"config\" option is associated with a value and the \"force\" option is boolean indicating the presence of the option.</li>\n<li><code class=\"language-text\">main</code>: whichever arguments not recognized by the parser is pushed into the \"main\" property.</li>\n</ul>\n<p>For the sake of curiosity, Shell.js could be configured and initialized as:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> shell <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token string\">\"config\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  commands<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token string\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      main<span class=\"token operator\">:</span> <span class=\"token string\">\"address\"</span><span class=\"token punctuation\">,</span>\n  \t  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  \t  \t<span class=\"token string\">\"force\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          type<span class=\"token operator\">:</span> <span class=\"token string\">\"boolean\"</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Running the command above shall lead to:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> command<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'start'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  config<span class=\"token operator\">:</span> <span class=\"token string\">'./my/repo'</span><span class=\"token punctuation\">,</span>\n  force<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  address<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'0.0.0.0:80'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's now deep dive on options and commands.</p>\n<h2 id=\"configuring-options\" style=\"position:relative;\"><a href=\"#configuring-options\" aria-label=\"configuring options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" fill=\"#fff\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring options</h2>\n<p>Command-line <code class=\"language-text\">options</code> are commands used to pass information to a program. These entries, also called command-line switches, can pass along cues for changing various settings. They follow the command name on the command line or right after the application call. <code class=\"language-text\">options</code> can be passed it two ways when prefixed with:</p>\n<ul>\n<li><code class=\"language-text\">--</code> followed by their name.</li>\n<li><code class=\"language-text\">-</code> followed by their shortcut alternative.</li>\n</ul>\n<p>It is recommended using shortcuts only for the most frequently used <code class=\"language-text\">options</code>, to avoid difficulty in understanding the commands of third-party developers.</p>\n<p>For example, let's expose a <code class=\"language-text\">config</code> option with a shortcut named <code class=\"language-text\">c</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> shell <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token string\">\"config\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      shortcut<span class=\"token operator\">:</span> <span class=\"token string\">'c'</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now you can pass the option and its value in two ways:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node app --config ./my/repo\nnode app -c ./my/repo</code></pre></div>\n<p>In place of <code class=\"language-text\">./my/repo</code> can be any value, but if you don't provide it, the CLI will run into an error. And what if you need to take a control over the values, which could be passed, or to use an option as a boolean switcher without providing with any value? To do this, options accept <a href=\"/config/options/\">multiple properties</a> including:</p>\n<ul>\n<li><code class=\"language-text\">default</code> (anything) - a default value if none is provided.</li>\n<li><code class=\"language-text\">enum</code> (array) - a list of possible and accepted values.</li>\n<li><code class=\"language-text\">required</code> (boolean) - whether or not this option must always be present (false by default).</li>\n<li><code class=\"language-text\">type</code> (string) - the type used to cast between a string argument and a JS value (accepted values are 'boolean', 'string', 'integer' and 'array').</li>\n</ul>\n<p>To illustrate the behaviour of each, let's make a basic example, but these can be used together within one <code class=\"language-text\">option</code> as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> shell <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'default-opt'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'select-opt'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">enum</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"let's go\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'required-opt'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'boolean-opt'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'boolean'</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Execute this application with a command like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node samples/logger <span class=\"token punctuation\">\\</span>\n  --required-opt present <span class=\"token punctuation\">\\</span>\n  --select-opt <span class=\"token string\">\"let's go\"</span> <span class=\"token punctuation\">\\</span>\n  --boolean-opt </code></pre></div>\n<p>The result of parsing will be the object like:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"required-opt\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"present\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"select-opt\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"let's go\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"boolean-opt\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"default-opt\"</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have considered using <code class=\"language-text\">options</code> without defining a <code class=\"language-text\">commands</code>. In such case, they apply to the overall application. Although, any option can be corresponded with a specific command.</p>\n<h2 id=\"configuring-commands\" style=\"position:relative;\"><a href=\"#configuring-commands\" aria-label=\"configuring commands permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" fill=\"#fff\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring commands</h2>\n<p>When you build an application with non-trivial functionaliies that provides more than one operation, you associate operations with commands. Shell.js allows you to flexibly configure <code class=\"language-text\">commands</code>, like building multiple levels of hierarchy and assigning their own <code class=\"language-text\">options</code> and <code class=\"language-text\">main</code> properties.</p>\n<p>Let's apply Shell.js capability to an example which create an application to log data into a file. We define our application to perform the following operations:</p>\n<ul>\n<li><code class=\"language-text\">append</code>\nAdd data at the end of a log file</li>\n<li><code class=\"language-text\">view</code>\nDisplay the content of the log file</li>\n</ul>\n<p>And as well, we must specify in which file the logged information should be stored.</p>\n<p>Create the javascript file with the name \"log.js\" and paste following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> shell <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shell'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'source'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      shortcut<span class=\"token operator\">:</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">'log.txt'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  commands<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'append'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      main<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span>\n        required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'view'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'recent'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          type<span class=\"token operator\">:</span> <span class=\"token string\">'boolean'</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<p>This configuration object consists:</p>\n<ul>\n<li><code class=\"language-text\">source</code>\nThe file where the data will be stored, if it is not passed the default value <code class=\"language-text\">log.txt</code> will be used.</li>\n<li><code class=\"language-text\">append</code>\nThe command for writing <code class=\"language-text\">data</code> into a log file. The <code class=\"language-text\">data</code> is the required main argument that passes strings.</li>\n<li><code class=\"language-text\">view</code>\nThe command for viewing a log file. The option <code class=\"language-text\">recent</code> passes a boolean flag which sets two modes of viewing: view the full file or last few records.</li>\n</ul>\n<h2 id=\"parsing-and-handling-arguments-commands-options-main\" style=\"position:relative;\"><a href=\"#parsing-and-handling-arguments-commands-options-main\" aria-label=\"parsing and handling arguments commands options main permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" fill=\"#fff\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parsing and handling arguments (commands, options, main)</h2>\n<p>In the configuration above we have prepared the model of our application. For the further handling and adding the functionality we will operate with the <code class=\"language-text\">args</code> object returned with the method <code class=\"language-text\">parse</code>, for example like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Parsing arguments</span>\n<span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// The example of handling arguments</span>\n<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>command<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'append'</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// Do something...</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'view'</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// Do something...</span>\n    <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's add a logic to our logging application:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Parsing arguments</span>\n<span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Use file system module</span>\n<span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Handling commands</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>command<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'append'</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// Appending the string to the file</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFile</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span>data <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'view'</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// Check the viewing mode</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>recent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Execute the bash command 'tail' for viewing strings from the ending of the file</span>\n      <span class=\"token comment\">// Prints only last 10 strings, because it is the default value of the 'tail' command</span>\n      <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tail '</span> <span class=\"token operator\">+</span> args<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">)</span>\n          process<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>stderr<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// View the full file using the file system module</span>\n      fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> buf</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err\n        process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now you can execute the application:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node log append <span class=\"token string\">\"this is a random string\"</span>\nnode log append <span class=\"token string\">\"this is a second random string\"</span>\nnode log view</code></pre></div>\n<p>The file with a name \"log.txt\" in you current directory will be created. The output of these commands is going to be like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">this is a random string\nthis is a second random string</code></pre></div>\n<p>Another example shows the usage of the <code class=\"language-text\">source</code> option. We define the name of the file like <code class=\"language-text\">mylog.txt</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node log -s mylog.txt append <span class=\"token string\">\"the first string of the file mylog.txt\"</span>\nnode log -s mylog.txt view</code></pre></div>\n<p>The output is:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">the first string of the file mylog.txt</code></pre></div>\n<p>To view 10 recent records of a log file we will use the command like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node log view --recent</code></pre></div>\n<h2 id=\"getting-help\" style=\"position:relative;\"><a href=\"#getting-help\" aria-label=\"getting help permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" fill=\"#fff\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting help</h2>\n<p>Shell.js convert the configuration object into a readable documentation string about how to use the CLI application or one of its commands. To integrate printing help uses a combination of the <code class=\"language-text\">helping</code> and <code class=\"language-text\">help</code> methods. The <code class=\"language-text\">helping</code> method takes the extracted data and check if printing help is requested. The <code class=\"language-text\">help</code> method return the usage information as a string:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Getting help</span>\n<span class=\"token comment\">// Wether or not help was requested</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>commands <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">helping</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Print a help information</span>\n  process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">help</span><span class=\"token punctuation\">(</span>commands<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// Terminate the process</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's add this code into the application and write the description for each of the commands and options:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Configuring application</span>\n<span class=\"token keyword\">const</span> shell <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shell'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'log'</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span> <span class=\"token string\">'Log information'</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'source'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      shortcut<span class=\"token operator\">:</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">'log.txt'</span><span class=\"token punctuation\">,</span>\n      description<span class=\"token operator\">:</span> <span class=\"token string\">'The path to a file in which the logged information are stored'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  commands<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'append'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      description<span class=\"token operator\">:</span> <span class=\"token string\">'Append strings to a log file'</span><span class=\"token punctuation\">,</span>\n      main<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span>\n        required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        description<span class=\"token operator\">:</span> <span class=\"token string\">'Logged data'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'view'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      description<span class=\"token operator\">:</span> <span class=\"token string\">'Viewing a log file'</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'recent'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          type<span class=\"token operator\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n          description<span class=\"token operator\">:</span> <span class=\"token string\">'Viewing 10 recent records in a log file'</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Parsing arguments</span>\n<span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Getting help</span>\n<span class=\"token comment\">// Wether or not help was requested</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>commands <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">helping</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Print a help information</span>\n  process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">help</span><span class=\"token punctuation\">(</span>commands<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// Terminate the process</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* ... */</span></code></pre></div>\n<p>From a user perspective, to print the help information of the overall application to the console you can use the command <code class=\"language-text\">help</code>, the option <code class=\"language-text\">--help</code> or its shortcut <code class=\"language-text\">-h</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node log <span class=\"token builtin class-name\">help</span>\nnode log --help\nnode log -h</code></pre></div>\n<p>It prints a human readable text divided into the following sections:</p>\n<ul>\n<li>\"NAME\" - the short description of the application or the command</li>\n<li>\"SYNOPSIS\" - the basic syntax for using the command and its options</li>\n<li>\"OPTIONS\" - the description of each option</li>\n<li>\"COMMANDS\" - the description of each command</li>\n<li>\"EXAMPLES\" - the usage of the command and its options</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">NAME\n    log - Log information\n\nSYNOPSIS\n    log [log options] &lt;command>\n\nOPTIONS\n    -s --source             The path to a file in which the logged information are stored\n    -h --help               Display help information\n\nCOMMANDS\n    append                  Append strings to a log file\n    view                    Viewing a log file\n    help                    Display help information about log\n\nEXAMPLES\n    log --help              Show this message\n    log help                Show this message</code></pre></div>\n<p>To print the help information of the specific commands use a command name after the <code class=\"language-text\">help</code> command, for example, <code class=\"language-text\">node log help view</code>. It prints a list of options of the application and any parent command as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">NAME\n    log view - Viewing a log file\n\nSYNOPSIS\n    log [log options] view [view options]\n\nOPTIONS for view\n    --recent                Viewing 10 recent records in a log file\n    -h --help               Display help information\n\nOPTIONS for log\n    -s --source             The path to a file in which the logged information are stored\n    -h --help               Display help information\n\nEXAMPLES\n    log view --help         Show this message</code></pre></div>\n<p>The <code class=\"language-text\">help</code> option is automatically registered to the application as well as to every commands. So, the same result as the above can be achieved with these commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node log view --help\nnode log view -h</code></pre></div>\n<h2 id=\"structuring-the-code-with-routing\" style=\"position:relative;\"><a href=\"#structuring-the-code-with-routing\" aria-label=\"structuring the code with routing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" fill=\"#fff\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Structuring the code with routing</h2>\n<p>We can build very simple CLI application using only one file like we made above. When the application is getting complex, the best practice is to load and configure the router in a separate top-level module that is dedicated to routing.</p>\n<p>Considering the \"log\" application containing the \"append\" and the \"view\" commands, each commands will define a <code class=\"language-text\">route</code> function. We will refactor it according to this project structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/\n|-- /node-modules\n|-- /routes\n    |-- append.js\n    |-- view.js\n|-- log.js\n|-- package.json\n|-- package-lock.json</code></pre></div>\n<p>To configure routing you need to define the <code class=\"language-text\">route</code> property for the <code class=\"language-text\">commands</code>. The value of this property should be as a function or the function exported by a module if defined as a string:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> shell <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shell'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n  commands<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'append'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* ... */</span>\n      handler<span class=\"token operator\">:</span> <span class=\"token string\">'./routes/append.js'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'view'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* ... */</span>\n      handler<span class=\"token operator\">:</span> <span class=\"token string\">'./routes/view.js'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>To execute routing you need to call the <code class=\"language-text\">route</code> method, which dispatch the commands of the CLI application into a function based on the <code class=\"language-text\">route</code> configuration property of the commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">route</code> method receives as first argument a context object with the following properties:</p>\n<ul>\n<li><code class=\"language-text\">argv</code> - the CLI arguments, either passed to the <code class=\"language-text\">route</code> method or obtained from <code class=\"language-text\">process.argv</code></li>\n<li><code class=\"language-text\">params</code> - the data extracted from <code class=\"language-text\">argv</code></li>\n<li><code class=\"language-text\">config</code> - the configuration object used to initialise the Shell.js instance</li>\n</ul>\n<p>Let's create the files with modules which will export functions \"append\" and \"view\".\nThe content of the file <code class=\"language-text\">./routes/append.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>argv<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use file system module</span>\n  <span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// Appending the string to the file</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFile</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">.</span>data <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The content of the file <code class=\"language-text\">./routes/view.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>argv<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Check the viewing mode</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>recent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Execute the bash command 'tail' for viewing strings from the ending of the file</span>\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tail '</span> <span class=\"token operator\">+</span> params<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">)</span>\n        process<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>stderr<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// View the full file using the file system module</span>\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> buf</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err\n      process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice, when using routing we don't need to take care about the parsing and calling the help, it is implemented inside the <code class=\"language-text\">route</code> method. The top-level module of the CLI application, which is the \"log.js\" file, will look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> shell <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shell'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'log'</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span> <span class=\"token string\">'Log information'</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'source'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      shortcut<span class=\"token operator\">:</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">'log.txt'</span><span class=\"token punctuation\">,</span>\n      description<span class=\"token operator\">:</span> <span class=\"token string\">'The path to a file in which the logged information are stored'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  commands<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'append'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      description<span class=\"token operator\">:</span> <span class=\"token string\">'Append strings to a log file'</span><span class=\"token punctuation\">,</span>\n      main<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span>\n        required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        description<span class=\"token operator\">:</span> <span class=\"token string\">'Logged data'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      handler<span class=\"token operator\">:</span> <span class=\"token string\">'./routes/append.js'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'view'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      description<span class=\"token operator\">:</span> <span class=\"token string\">'Viewing a log file'</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'recent'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          type<span class=\"token operator\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n          description<span class=\"token operator\">:</span> <span class=\"token string\">'Viewing 10 recent records in a log file'</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      handler<span class=\"token operator\">:</span> <span class=\"token string\">'./routes/view.js'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Tutorial","keywords":["shell","node.js","cli","usage","tutorial","application","configuration"],"description":"How to build CLI application using Shell.js."},"fields":{"edit_url":"https://github.com/adaltas/node-shell/edit/master/content/usage/tutorial.md","slug":"/usage/tutorial/"},"headings":[{"value":"What is the library about?","depth":2,"id":"what-is-the-library-about"},{"value":"Getting started","depth":2,"id":"getting-started"},{"value":"Parsing arguments","depth":2,"id":"parsing-arguments"},{"value":"Argument topology","depth":2,"id":"argument-topology"},{"value":"Configuring options","depth":2,"id":"configuring-options"},{"value":"Configuring commands","depth":2,"id":"configuring-commands"},{"value":"Parsing and handling arguments (commands, options, main)","depth":2,"id":"parsing-and-handling-arguments-commands-options-main"},{"value":"Getting help","depth":2,"id":"getting-help"},{"value":"Structuring the code with routing","depth":2,"id":"structuring-the-code-with-routing"}]}},"pageContext":{}},
    "staticQueryHashes": ["1387919533","63159454"]}