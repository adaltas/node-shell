{
    "componentChunkName": "component---src-templates-page-js",
    "path": "/usage/routing/",
    "result": {"data":{"markdownRemark":{"html":"<p>Routing dispatch the commands of the CLI application into user provided handler function. The handler function are defined by the <code class=\"language-text\">route</code> configuration property of the application or of a command.</p>\n<p>Help is automatically activated when using routing. A new help command is registered as well as the <code class=\"language-text\">--help -h</code> option to each commands.</p>\n<h2 id=\"configuration\" style=\"position:relative;\"><a href=\"#configuration\" aria-label=\"configuration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" fill=\"#fff\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuration</h2>\n<p>The <code class=\"language-text\">router</code> configuration property define the routing behaviour. It is available at the application level as well as for every command. Refer to the <a href=\"/config/router/\"><code class=\"language-text\">router</code> configuration property</a> for additional information.</p>\n<h2 id=\"execution\" style=\"position:relative;\"><a href=\"#execution\" aria-label=\"execution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" fill=\"#fff\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Execution</h2>\n<p>Routing is executed by calling <code class=\"language-text\">route</code> method on the Shell.js instance. Refer to the <a href=\"/api/route/\"><code class=\"language-text\">route</code> method API</a> for additional information.</p>\n<h2 id=\"handler-function\" style=\"position:relative;\"><a href=\"#handler-function\" aria-label=\"handler function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" fill=\"#fff\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Handler function</h2>\n<p>Arguments are transparently parsed and the handler function associated to the application or a command is called with a context object as first argument. The context contains the following properties:</p>\n<ul>\n<li><code class=\"language-text\">argv</code><br>\nCLI arguments.</li>\n<li><code class=\"language-text\">command</code> ([string])<br>\nThe command being called, an empty array if no command is executed.</li>\n<li><code class=\"language-text\">error</code><br>\nError object if any error was thrown when parsing the arguments. The property is used internally to provide the error object to the help routing function.</li>\n<li><code class=\"language-text\">params</code><br>\nExtracted data from <code class=\"language-text\">argv</code></li>\n<li><code class=\"language-text\">stderr</code><br>\nThe StreamWriter where to redirect error data.</li>\n<li><code class=\"language-text\">stderr_end</code><br>\nThe StreamWriter where to redirect error data.</li>\n<li><code class=\"language-text\">stdout</code><br>\nThe StreamWriter where to redirect standard data.</li>\n<li><code class=\"language-text\">stdout_end</code></li>\n</ul>\n<h2 id=\"examples\" style=\"position:relative;\"><a href=\"#examples\" aria-label=\"examples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" fill=\"#fff\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h2>\n<h3 id=\"interacting-with-code-classlanguage-textstdoutcode-and-code-classlanguage-textstdincode\" style=\"position:relative;\"><a href=\"#interacting-with-code-classlanguage-textstdoutcode-and-code-classlanguage-textstdincode\" aria-label=\"interacting with code classlanguage textstdoutcode and code classlanguage textstdincode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" fill=\"#fff\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interacting with <code class=\"language-text\">stdout</code> and <code class=\"language-text\">stdin</code></h3>\n<p><a href=\"https://github.com/adaltas/node-shell/blob/master/samples/router.js\">The router example</a> defines a <code class=\"language-text\">list</code> command which print the files of a directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> shell <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shell'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> spawn <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">commands</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'list'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">main</span><span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">handler</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>params<span class=\"token punctuation\">,</span> stderr<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> ls <span class=\"token operator\">=</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'-lh'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>params<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        ls<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>stderr<span class=\"token punctuation\">)</span>\n        ls<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can test the behavior of this command with <code class=\"language-text\">node samples/router.js list {a_directory}</code>. For example, if you are inside the root folder of this project repository, executing <code class=\"language-text\">node samples/router.js list ./src</code> prints the files of the <a href=\"https://github.com/adaltas/node-shell/blob/master/src/\">\"src\" directory</a>.</p>\n<p>You can verify that <code class=\"language-text\">stdout</code> and <code class=\"language-text\">stderr</code> are honored by redirecting their content to a file:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># stdout is redirected to a file named \"stdout.log\"</span>\n<span class=\"token function\">node</span> samples/router.js list src <span class=\"token operator\">></span> ./stdout.log\n<span class=\"token comment\"># stderr is redirected to a file named \"stderr.log\"</span>\n<span class=\"token function\">node</span> samples/router.js list invalid <span class=\"token operator\">></span> ./stderr.log</code></pre></div>\n<h3 id=\"working-with-promises\" style=\"position:relative;\"><a href=\"#working-with-promises\" aria-label=\"working with promises permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" fill=\"#fff\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with promises</h3>\n<p>The routing function can return any value. There is no restriction imposed to the developer. Thus, it is <a href=\"https://github.com/adaltas/node-shell/blob/master/samples/router_promise.js\">compatible with promise</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> shell <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shell'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> spawn <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">commands</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'list'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">main</span><span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function-variable function\">handler</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>params<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> stderr<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">const</span> ls <span class=\"token operator\">=</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'-lh'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>params<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n              ls<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>stderr<span class=\"token punctuation\">)</span>\n              ls<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">)</span>\n              ls<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                code <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n                <span class=\"token operator\">?</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Command succeed!'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">:</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Command failed with code: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>code<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">=== </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> ===</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">=== </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> ===</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Routing","keywords":["shell","node.js","cli","usage","routing","route","handler","fucntion"],"description":"Route commands to individual handler functions."},"fields":{"edit_url":"https://github.com/adaltas/node-shell/edit/master/content/usage/routing.md","slug":"/usage/routing/"},"headings":[{"value":"Configuration","depth":2,"id":"configuration"},{"value":"Execution","depth":2,"id":"execution"},{"value":"Handler function","depth":2,"id":"handler-function"},{"value":"Examples","depth":2,"id":"examples"},{"value":"Interacting with <code class=\"language-text\">stdout</code> and <code class=\"language-text\">stdin</code>","depth":3,"id":"interacting-with-code-classlanguage-textstdoutcode-and-code-classlanguage-textstdincode"},{"value":"Working with promises","depth":3,"id":"working-with-promises"}]}},"pageContext":{}},
    "staticQueryHashes": ["1387919533","63159454"]}