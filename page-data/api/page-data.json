{"componentChunkName":"component---src-templates-page-js","path":"/api/","result":{"data":{"markdownRemark":{"html":"<p>Shell.js is written as an ESM package. It is also available as a CommonJS package. To import the package, uses:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ESM package</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> shell <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'shell'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// CommonJS package</span>\n<span class=\"token keyword\">const</span> shell <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shell'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A Shell.js application is initilized with a <a href=\"/config/\">configuration</a> object:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It exposes the following functions:</p>\n<ul>\n<li><a href=\"./compile/\"><code class=\"language-text\">shell.compile</code></a> (command, [options])<br>\nConvert data to an arguments array.</li>\n<li><a href=\"./help/\"><code class=\"language-text\">shell.help</code></a> (command)<br>\nFormat the configuration into a readable documentation string.</li>\n<li><a href=\"./helping/\"><code class=\"language-text\">shell.helping</code></a> (command)<br>\nDetermine if help was requested by returning zero to n commands if help is requested or null otherwise.</li>\n<li><a href=\"./load/\"><code class=\"language-text\">shell.load</code></a> (module[string])<br>\nInternal function used to load modules, see the <a href=\"/config/load/\"><code class=\"language-text\">load</code></a> option to pass a function or a module referencing the function.</li>\n<li><a href=\"./parse/\"><code class=\"language-text\">shell.parse</code></a> ([arguments])<br>\nConvert an arguments list to a data object.</li>\n<li><a href=\"./route/\"><code class=\"language-text\">shell.route</code></a> (argv[array|process], args[mixed]...)<br>\nSimilar to parse but it will also call the function defined by the \"route\"\noption. The first argument is the arguments array to parse, other arguments\nare simply transmitted to the <code class=\"language-text\">route</code> method or module as additional arguments.\nThe <code class=\"language-text\">route</code> method provided by the user receives the parsed data as its\nfirst argument. If the option \"extended\" is activated, it also receives the\noriginal arguments and configuration as second and third arguments. Any user\nprovided arguments are transmitted as is as additional arguments.</li>\n</ul>","frontmatter":{"title":"API","keywords":["shell","node.js","cli","api","help","parse","load","route","compile"],"description":"API methods supported."},"fields":{"edit_url":"https://github.com/adaltas/node-shell/edit/master/docs/content/api/index.md","slug":"/api/"},"headings":[]}},"pageContext":{}},"staticQueryHashes":["233544656","63159454"],"slicesMap":{}}